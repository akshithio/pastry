// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    conversations Conversation[]
    messages      Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Conversation {
  id        String    @id @default(cuid())
  title     String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isPinned  Boolean   @default(false)
  isBranched Boolean  @default(false)
  isPublic  Boolean   @default(false)
  model String @default("Pixtral 12B")
  streamIds StreamTracker[]
}

model Message {
  id              String    @id @default(cuid())
  conversationId  String
  userId          String
  role            String
  content         String    @db.Text
  isStreaming     Boolean   @default(false)
  streamId        String?
  partialContent  String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments     MessageAttachment[] // Add this line
  
  @@map("messages")
}

model StreamTracker {
  id             String       @id @default(cuid())
  streamId       String       @unique
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  userId         String
  status         String       @default("active") // "active", "completed", "failed"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([conversationId])
  @@index([streamId])
}

model MessageAttachment {
  id          String   @id @default(cuid())
  messageId   String
  name        String
  contentType String
  url         String   @db.Text // Store data URLs
  size        Int?
  createdAt   DateTime @default(now())
  
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@map("message_attachments")
}